//递归方法如下：
class Solution1
{
	public:
	int GetIt(vector<int>  &v) {
		return process(v, 0, INT_MIN);
	}
	int process(vector<int> &v, int pos, int max) {
		if (pos >= v.size()) 
			return 0;
		int ret1 =0, ret2=0;
		if (v[pos] > max)		//判断条件中有从前面传进来的max，在dp的时候，是表现为从数组当前位置向后遍历！
				ret1 =  1+process(v, pos + 1, v[pos]);
				ret2 =  process(v, pos + 1, max);
		return ret1 > ret2 ?ret1 : ret2;
	}
};

//动态规划方法如下：
class Solution2
{
public:
	int GetIt(vector<int>  &v) {
		if (v.empty()) {
			return 0;
		}
		int *ret = new int[v.size()];
		memset(ret, 0, sizeof(int)*(v.size()));
		for (int i = v.size() - 1; i >= 0; --i) {
			int ret_val = find_max_ifnull_0(v, i, ret); //找到满足v[i] > v[cur]前提下，arr[i]中最大的，没有就是0
			ret[i] = ret_val + 1;
		}

		int max = 0;
		for (int i = 0; i < v.size(); ++i) {
			if (ret[i] > max)
				max = ret[i];
		}

		delete[] ret;
		return max;
	}

private:
	//找到满足v[i] > v[cur]前提下，arr[i]中最大的
	int find_max_ifnull_0(vector<int>& v,int cur, int *arr) {
		if (cur == v.size()-1) {
			return 0;//最后一个
		}
		int max = 0;
		for (int i = cur+1; i < v.size() ; ++i) {
			if (v[i] > v[cur] && arr[i] > max) {
				max = arr[i];
			}
		}
		return max;
	}
};

总结：
从递归到动态规划的改写步骤：
  1 看递归调用的函数中形参有哪些，移动的那个就是维数，本题中只有pos，是一维动态规划。
  2 递归中max这个参数是从上一层传进来的，在改dp的时候，其意义就是v[i] > v[cur]，当前位置的v[cur]起到了max的作用。
